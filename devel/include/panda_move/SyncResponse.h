// Generated by gencpp from file panda_move/SyncResponse.msg
// DO NOT EDIT!


#ifndef PANDA_MOVE_MESSAGE_SYNCRESPONSE_H
#define PANDA_MOVE_MESSAGE_SYNCRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace panda_move
{
template <class ContainerAllocator>
struct SyncResponse_
{
  typedef SyncResponse_<ContainerAllocator> Type;

  SyncResponse_()
    : object_name()
    , position()
    , orientation()
    , joint_state()  {
    }
  SyncResponse_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , position(_alloc)
    , orientation(_alloc)
    , joint_state(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _object_name_type;
  _object_name_type object_name;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Quaternion_<ContainerAllocator> >::other >  _orientation_type;
  _orientation_type orientation;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_state_type;
  _joint_state_type joint_state;





  typedef boost::shared_ptr< ::panda_move::SyncResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_move::SyncResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SyncResponse_

typedef ::panda_move::SyncResponse_<std::allocator<void> > SyncResponse;

typedef boost::shared_ptr< ::panda_move::SyncResponse > SyncResponsePtr;
typedef boost::shared_ptr< ::panda_move::SyncResponse const> SyncResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_move::SyncResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_move::SyncResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_move::SyncResponse_<ContainerAllocator1> & lhs, const ::panda_move::SyncResponse_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation &&
    lhs.joint_state == rhs.joint_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_move::SyncResponse_<ContainerAllocator1> & lhs, const ::panda_move::SyncResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panda_move::SyncResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_move::SyncResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_move::SyncResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_move::SyncResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_move::SyncResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_move::SyncResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_move::SyncResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "118b22079c9a9e717f3c182246de032c";
  }

  static const char* value(const ::panda_move::SyncResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x118b22079c9a9e71ULL;
  static const uint64_t static_value2 = 0x7f3c182246de032cULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_move::SyncResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_move/SyncResponse";
  }

  static const char* value(const ::panda_move::SyncResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_move::SyncResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] object_name\n"
"geometry_msgs/Point[] position\n"
"geometry_msgs/Quaternion[] orientation\n"
"float64[] joint_state\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::panda_move::SyncResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_move::SyncResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.position);
      stream.next(m.orientation);
      stream.next(m.joint_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SyncResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_move::SyncResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_move::SyncResponse_<ContainerAllocator>& v)
  {
    s << indent << "object_name[]" << std::endl;
    for (size_t i = 0; i < v.object_name.size(); ++i)
    {
      s << indent << "  object_name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "    ", v.orientation[i]);
    }
    s << indent << "joint_state[]" << std::endl;
    for (size_t i = 0; i < v.joint_state.size(); ++i)
    {
      s << indent << "  joint_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_MOVE_MESSAGE_SYNCRESPONSE_H
