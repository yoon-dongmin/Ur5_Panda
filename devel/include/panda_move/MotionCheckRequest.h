// Generated by gencpp from file panda_move/MotionCheckRequest.msg
// DO NOT EDIT!


#ifndef PANDA_MOVE_MESSAGE_MOTIONCHECKREQUEST_H
#define PANDA_MOVE_MESSAGE_MOTIONCHECKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace panda_move
{
template <class ContainerAllocator>
struct MotionCheckRequest_
{
  typedef MotionCheckRequest_<ContainerAllocator> Type;

  MotionCheckRequest_()
    : motion_type()
    , object_1()
    , object_2()  {
    }
  MotionCheckRequest_(const ContainerAllocator& _alloc)
    : motion_type(_alloc)
    , object_1(_alloc)
    , object_2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motion_type_type;
  _motion_type_type motion_type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _object_1_type;
  _object_1_type object_1;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _object_2_type;
  _object_2_type object_2;





  typedef boost::shared_ptr< ::panda_move::MotionCheckRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_move::MotionCheckRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MotionCheckRequest_

typedef ::panda_move::MotionCheckRequest_<std::allocator<void> > MotionCheckRequest;

typedef boost::shared_ptr< ::panda_move::MotionCheckRequest > MotionCheckRequestPtr;
typedef boost::shared_ptr< ::panda_move::MotionCheckRequest const> MotionCheckRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_move::MotionCheckRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_move::MotionCheckRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_move::MotionCheckRequest_<ContainerAllocator1> & lhs, const ::panda_move::MotionCheckRequest_<ContainerAllocator2> & rhs)
{
  return lhs.motion_type == rhs.motion_type &&
    lhs.object_1 == rhs.object_1 &&
    lhs.object_2 == rhs.object_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_move::MotionCheckRequest_<ContainerAllocator1> & lhs, const ::panda_move::MotionCheckRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_move::MotionCheckRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_move::MotionCheckRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_move::MotionCheckRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0baa49dd0a199f18dcbca155877942b7";
  }

  static const char* value(const ::panda_move::MotionCheckRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0baa49dd0a199f18ULL;
  static const uint64_t static_value2 = 0xdcbca155877942b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_move/MotionCheckRequest";
  }

  static const char* value(const ::panda_move::MotionCheckRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string motion_type\n"
"string[] object_1\n"
"string[] object_2\n"
;
  }

  static const char* value(const ::panda_move::MotionCheckRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motion_type);
      stream.next(m.object_1);
      stream.next(m.object_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionCheckRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_move::MotionCheckRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_move::MotionCheckRequest_<ContainerAllocator>& v)
  {
    s << indent << "motion_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion_type);
    s << indent << "object_1[]" << std::endl;
    for (size_t i = 0; i < v.object_1.size(); ++i)
    {
      s << indent << "  object_1[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_1[i]);
    }
    s << indent << "object_2[]" << std::endl;
    for (size_t i = 0; i < v.object_2.size(); ++i)
    {
      s << indent << "  object_2[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_MOVE_MESSAGE_MOTIONCHECKREQUEST_H
