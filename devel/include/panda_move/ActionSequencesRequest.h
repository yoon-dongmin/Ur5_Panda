// Generated by gencpp from file panda_move/ActionSequencesRequest.msg
// DO NOT EDIT!


#ifndef PANDA_MOVE_MESSAGE_ACTIONSEQUENCESREQUEST_H
#define PANDA_MOVE_MESSAGE_ACTIONSEQUENCESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <panda_move/Action.h>

namespace panda_move
{
template <class ContainerAllocator>
struct ActionSequencesRequest_
{
  typedef ActionSequencesRequest_<ContainerAllocator> Type;

  ActionSequencesRequest_()
    : action_sequences()  {
    }
  ActionSequencesRequest_(const ContainerAllocator& _alloc)
    : action_sequences(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::panda_move::Action_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::panda_move::Action_<ContainerAllocator> >::other >  _action_sequences_type;
  _action_sequences_type action_sequences;





  typedef boost::shared_ptr< ::panda_move::ActionSequencesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::panda_move::ActionSequencesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ActionSequencesRequest_

typedef ::panda_move::ActionSequencesRequest_<std::allocator<void> > ActionSequencesRequest;

typedef boost::shared_ptr< ::panda_move::ActionSequencesRequest > ActionSequencesRequestPtr;
typedef boost::shared_ptr< ::panda_move::ActionSequencesRequest const> ActionSequencesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::panda_move::ActionSequencesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::panda_move::ActionSequencesRequest_<ContainerAllocator1> & lhs, const ::panda_move::ActionSequencesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action_sequences == rhs.action_sequences;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::panda_move::ActionSequencesRequest_<ContainerAllocator1> & lhs, const ::panda_move::ActionSequencesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace panda_move

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::panda_move::ActionSequencesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::panda_move::ActionSequencesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::panda_move::ActionSequencesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aca026e1261af957e6a9d1e4f1f468ef";
  }

  static const char* value(const ::panda_move::ActionSequencesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaca026e1261af957ULL;
  static const uint64_t static_value2 = 0xe6a9d1e4f1f468efULL;
};

template<class ContainerAllocator>
struct DataType< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_move/ActionSequencesRequest";
  }

  static const char* value(const ::panda_move::ActionSequencesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "panda_move/Action[] action_sequences\n"
"\n"
"================================================================================\n"
"MSG: panda_move/Action\n"
"string name\n"
"string[] params\n"
;
  }

  static const char* value(const ::panda_move::ActionSequencesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_sequences);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionSequencesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::panda_move::ActionSequencesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::panda_move::ActionSequencesRequest_<ContainerAllocator>& v)
  {
    s << indent << "action_sequences[]" << std::endl;
    for (size_t i = 0; i < v.action_sequences.size(); ++i)
    {
      s << indent << "  action_sequences[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::panda_move::Action_<ContainerAllocator> >::stream(s, indent + "    ", v.action_sequences[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PANDA_MOVE_MESSAGE_ACTIONSEQUENCESREQUEST_H
