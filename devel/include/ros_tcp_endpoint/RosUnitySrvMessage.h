// Generated by gencpp from file ros_tcp_endpoint/RosUnitySrvMessage.msg
// DO NOT EDIT!


#ifndef ROS_TCP_ENDPOINT_MESSAGE_ROSUNITYSRVMESSAGE_H
#define ROS_TCP_ENDPOINT_MESSAGE_ROSUNITYSRVMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_tcp_endpoint
{
template <class ContainerAllocator>
struct RosUnitySrvMessage_
{
  typedef RosUnitySrvMessage_<ContainerAllocator> Type;

  RosUnitySrvMessage_()
    : srv_id(0)
    , is_request(false)
    , topic()
    , payload()  {
    }
  RosUnitySrvMessage_(const ContainerAllocator& _alloc)
    : srv_id(0)
    , is_request(false)
    , topic(_alloc)
    , payload(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _srv_id_type;
  _srv_id_type srv_id;

   typedef uint8_t _is_request_type;
  _is_request_type is_request;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _payload_type;
  _payload_type payload;





  typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> const> ConstPtr;

}; // struct RosUnitySrvMessage_

typedef ::ros_tcp_endpoint::RosUnitySrvMessage_<std::allocator<void> > RosUnitySrvMessage;

typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnitySrvMessage > RosUnitySrvMessagePtr;
typedef boost::shared_ptr< ::ros_tcp_endpoint::RosUnitySrvMessage const> RosUnitySrvMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator1> & lhs, const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator2> & rhs)
{
  return lhs.srv_id == rhs.srv_id &&
    lhs.is_request == rhs.is_request &&
    lhs.topic == rhs.topic &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator1> & lhs, const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_tcp_endpoint

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e4da90c1cd45db0881a77473482b38e";
  }

  static const char* value(const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e4da90c1cd45db0ULL;
  static const uint64_t static_value2 = 0x881a77473482b38eULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_tcp_endpoint/RosUnitySrvMessage";
  }

  static const char* value(const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 srv_id\n"
"bool is_request\n"
"string topic\n"
"uint8[] payload\n"
;
  }

  static const char* value(const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.srv_id);
      stream.next(m.is_request);
      stream.next(m.topic);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RosUnitySrvMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_tcp_endpoint::RosUnitySrvMessage_<ContainerAllocator>& v)
  {
    s << indent << "srv_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.srv_id);
    s << indent << "is_request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_request);
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.payload[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_TCP_ENDPOINT_MESSAGE_ROSUNITYSRVMESSAGE_H
