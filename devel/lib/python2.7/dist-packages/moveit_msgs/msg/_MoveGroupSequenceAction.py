# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_msgs/MoveGroupSequenceAction.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import moveit_msgs.msg
import object_recognition_msgs.msg
import octomap_msgs.msg
import sensor_msgs.msg
import shape_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class MoveGroupSequenceAction(genpy.Message):
  _md5sum = "146b2ccf95324a792cf72761e640ab31"
  _type = "moveit_msgs/MoveGroupSequenceAction"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

MoveGroupSequenceActionGoal action_goal
MoveGroupSequenceActionResult action_result
MoveGroupSequenceActionFeedback action_feedback

================================================================================
MSG: moveit_msgs/MoveGroupSequenceActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MoveGroupSequenceGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: moveit_msgs/MoveGroupSequenceGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# A list of motion commands - one for each section of the sequence
MotionSequenceRequest request

# Planning options
PlanningOptions planning_options

================================================================================
MSG: moveit_msgs/MotionSequenceRequest
# List of motion planning request with a blend_radius for each.
# In the response of the planner all of these will be executable as one sequence.
MotionSequenceItem[] items

================================================================================
MSG: moveit_msgs/MotionSequenceItem
# The plan request for this item.
# It is the planning request for this segment of the sequence, as if it were a solitary motion.
MotionPlanRequest req

# To blend between sequence items, the motion may be smoothed using a circular motion.
# The blend radius of the circle between this and the next command, where 0 means no blending.
float64 blend_radius

================================================================================
MSG: moveit_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
RobotState start_state

# The possible goal states for the model to plan for. Each element of
# the array defines a goal region. The goal is achieved
# if the constraints for a particular region are satisfied
Constraints[] goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
Constraints path_constraints

# The constraints the resulting trajectory must satisfy
TrajectoryConstraints trajectory_constraints

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for (in seconds)
float64 allowed_planning_time

# Scaling factors for optionally reducing the maximum joint velocities and
# accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
# acceleration specified in the robot model are multiplied by thier respective
# factors.  If either are outside their valid ranges (importantly, this
# includes being set to 0.0), the factor is set to the default value of 1.0
# internally (i.e., maximum joint velocity or maximum joint acceleration).
float64 max_velocity_scaling_factor
float64 max_acceleration_scaling_factor

================================================================================
MSG: moveit_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the volume (a box) in which the robot is allowed to move.
# This is useful only when planning for mobile parts of 
# the robot as well.

# Define the frame of reference for the box corners
Header header

# The minumum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 min_corner

# The maximum corner of the box, with respect to the robot starting pose
geometry_msgs/Vector3 max_corner

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: moveit_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state

# Joints that may have multiple DOF are specified here
sensor_msgs/MultiDOFJointState multi_dof_joint_state

# Attached collision objects (attached to some link on the robot)
AttachedCollisionObject[] attached_collision_objects

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
# of a moveit::core::RobotState before updating it with this message)
bool is_diff

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: sensor_msgs/MultiDOFJointState
# Representation of state for joints with multiple degrees of freedom, 
# following the structure of JointState.
#
# It is assumed that a joint in a system corresponds to a transform that gets applied 
# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)
# and those 3DOF can be expressed as a transformation matrix, and that transformation
# matrix can be converted back to (x, y, yaw)
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# wrench associated with them, you can leave the wrench array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.

Header header

string[] joint_names
geometry_msgs/Transform[] transforms
geometry_msgs/Twist[] twist
geometry_msgs/Wrench[] wrench

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: moveit_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
string link_name

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is already considered by default
string[] touch_links

# If certain links were placed in a particular posture for this object to remain attached 
# (e.g., an end effector closing around an object), the posture necessary for releasing
# the object is stored here
trajectory_msgs/JointTrajectory detach_posture

# The weight of the attached object, if known
float64 weight

================================================================================
MSG: moveit_msgs/CollisionObject
# A header, used for interpreting the poses
Header header

# The id of the object (name used in MoveIt)
string id

# The object type in a database of known objects
object_recognition_msgs/ObjectType type

# The collision geometries associated with the object.
# Their poses are with respect to the specified header

# Solid geometric primitives
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

# Meshes
shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
shape_msgs/Plane[] planes
geometry_msgs/Pose[] plane_poses

# Adds the object to the planning scene. If the object previously existed, it is replaced.
byte ADD=0

# Removes the object from the environment entirely (everything that matches the specified id)
byte REMOVE=1

# Append to an object that already exists in the planning scene. If the object does not exist, it is added.
byte APPEND=2

# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
# if solely moving the object is desired
byte MOVE=3

# Operation to be performed
byte operation

================================================================================
MSG: object_recognition_msgs/ObjectType
################################################## OBJECT ID #########################################################

# Contains information about the type of a found object. Those two sets of parameters together uniquely define an
# object

# The key of the found object: the unique identifier in the given db
string key

# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding
# database. E.g., in object_recognition, it can look like: "{'type':'CouchDB', 'root':'http://localhost'}"
# There is no conventional format for those parameters and it's nice to keep that flexibility.
# The object_recognition_core as a generic DB type that can read those fields
# Current examples:
# For CouchDB:
#   type: 'CouchDB'
#   root: 'http://localhost:5984'
#   collection: 'object_recognition'
# For SQL household database:
#   type: 'SqlHousehold'
#   host: 'wgs36'
#   port: 5432
#   user: 'willow'
#   password: 'willow'
#   name: 'household_objects'
#   module: 'tabletop'
string db

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: moveit_msgs/Constraints
# This message contains a list of motion planning constraints.
# All constraints must be satisfied for a goal to be considered valid

string name

JointConstraint[] joint_constraints

PositionConstraint[] position_constraints

OrientationConstraint[] orientation_constraints

VisibilityConstraint[] visibility_constraints

================================================================================
MSG: moveit_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/PositionConstraint
# This message contains the definition of a position constraint.

Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Vector3 target_point_offset

# The volume this constraint refers to 
BoundingVolume constraint_region

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/BoundingVolume
# Define a volume in 3D

# A set of solid geometric primitives that make up the volume to define (as a union)
shape_msgs/SolidPrimitive[] primitives

# The poses at which the primitives are located
geometry_msgs/Pose[] primitive_poses

# In addition to primitives, meshes can be specified to add to the bounding volume (again, as union)
shape_msgs/Mesh[] meshes

# The poses at which the meshes are located
geometry_msgs/Pose[] mesh_poses

================================================================================
MSG: moveit_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.

Header header

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# The robot link this constraint refers to
string link_name

# optional axis-angle error tolerances specified
float64 absolute_x_axis_tolerance
float64 absolute_y_axis_tolerance
float64 absolute_z_axis_tolerance

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: moveit_msgs/VisibilityConstraint
# The constraint is useful to maintain visibility to a disc (the target) in a particular frame.
# This disc forms the base of a visibiliy cone whose tip is at the origin of the sensor.
# Maintaining visibility is done by ensuring the robot does not obstruct the visibility cone.
# Note:
# This constraint does NOT enforce minimum or maximum distances between the sensor
# and the target, nor does it enforce the target to be in the field of view of
# the sensor. A PositionConstraint can (and probably should) be used for such purposes.

# The radius of the disc that should be maintained visible 
float64 target_radius

# The pose of the disc; as the robot moves, the pose of the disc may change as well
# This can be in the frame of a particular robot link, for example
geometry_msgs/PoseStamped target_pose

# From the sensor origin towards the target, the disc forms a visibility cone
# This cone is approximated using many sides. For example, when using 4 sides, 
# that in fact makes the visibility region be a pyramid.
# This value should always be 3 or more.
int32 cone_sides

# The pose in which visibility is to be maintained.
# The frame id should represent the robot link to which the sensor is attached.
# It is assumed the sensor can look directly at the target, in any direction.
# This assumption is usually not true, but additional PositionConstraints
# can resolve this issue.
geometry_msgs/PoseStamped sensor_pose

# Even though the disc is maintained visible, the visibility cone can be very small
# because of the orientation of the disc with respect to the sensor. It is possible
# for example to view the disk almost from a side, in which case the visibility cone 
# can end up having close to 0 volume. The view angle is defined to be the angle between
# the normal to the visibility disc and the direction vector from the sensor origin.
# The value below represents the minimum desired view angle. For a perfect view,
# this value will be 0 (the two vectors are exact opposites). For a completely obstructed view
# this value will be Pi/2 (the vectors are perpendicular). This value defined below 
# is the maximum view angle to be maintained. This should be a value in the open interval
# (0, Pi/2). If 0 is set, the view angle is NOT enforced.
float64 max_view_angle

# This angle is used similarly to max_view_angle but limits the maximum angle
# between the sensor origin direction vector and the axis that connects the
# sensor origin to the target frame origin. The value is again in the range (0, Pi/2)
# and is NOT enforced if set to 0.
float64 max_range_angle

# The axis that is assumed to indicate the direction of view for the sensor
# X = 2, Y = 1, Z = 0
uint8 SENSOR_Z=0
uint8 SENSOR_Y=1
uint8 SENSOR_X=2
uint8 sensor_view_direction

# A weighting factor for this constraint (denotes relative importance to other constraints. Closer to zero means less important)
float64 weight

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/TrajectoryConstraints
# The array of constraints to consider along the trajectory
Constraints[] constraints

================================================================================
MSG: moveit_msgs/PlanningOptions

# The diff to consider for the planning scene (optional)
PlanningScene planning_scene_diff

# If this flag is set to true, the action
# returns an executable plan in the response but does not attempt execution  
bool plan_only

# If this flag is set to true, the action of planning &
# executing is allowed to look around  (move sensors) if
# it seems that not enough information is available about
# the environment
bool look_around

# If this value is positive, the action of planning & executing
# is allowed to look around for a maximum number of attempts;
# If the value is left as 0, the default value is used, as set
# with dynamic_reconfigure
int32 look_around_attempts

# If set and if look_around is true, this value is used as
# the maximum cost allowed for a path to be considered executable.
# If the cost of a path is higher than this value, more sensing or 
# a new plan needed. If left as 0.0 but look_around is true, then 
# the default value set via dynamic_reconfigure is used
float64 max_safe_execution_cost

# If the plan becomes invalidated during execution, it is possible to have
# that plan recomputed and execution restarted. This flag enables this
# functionality 
bool replan

# The maximum number of replanning attempts 
int32 replan_attempts

# The amount of time to wait in between replanning attempts (in seconds)
float64 replan_delay

================================================================================
MSG: moveit_msgs/PlanningScene
# name of planning scene
string name

# full robot state
RobotState robot_state

# The name of the robot model this scene is for
string robot_model_name

#additional frames for duplicating tf (with respect to the planning frame)
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

# all link paddings
LinkPadding[] link_padding

# all link scales
LinkScale[] link_scale

# Attached objects, collision objects, even the octomap or collision map can have 
# colors associated to them. This array specifies them.
ObjectColor[] object_colors

# the collision map
PlanningSceneWorld world

# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
bool is_diff

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: moveit_msgs/AllowedCollisionMatrix
# The list of entry names in the matrix
string[] entry_names

# The individual entries in the allowed collision matrix
# square, symmetric, with same order as entry_names
AllowedCollisionEntry[] entry_values

# In addition to the collision matrix itself, we also have 
# the default entry value for each entry name.

# If the allowed collision flag is queried for a pair of names (n1, n2)
# that is not found in the collision matrix itself, the value of
# the collision flag is considered to be that of the entry (n1 or n2)
# specified in the list below. If both n1 and n2 are found in the list 
# of defaults, the result is computed with an AND operation

string[] default_entry_names
bool[] default_entry_values

================================================================================
MSG: moveit_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: moveit_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: moveit_msgs/LinkScale
#name for the link
string link_name

# scaling to apply to the link
float64 scale

================================================================================
MSG: moveit_msgs/ObjectColor
# The object id for which we specify color
string id

# The value of the color
std_msgs/ColorRGBA color

================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a

================================================================================
MSG: moveit_msgs/PlanningSceneWorld
# collision objects
CollisionObject[] collision_objects

# The octomap that represents additional collision data
octomap_msgs/OctomapWithPose octomap

================================================================================
MSG: octomap_msgs/OctomapWithPose
# A 3D map in binary format, as Octree
Header header

# The pose of the octree with respect to the header frame 
geometry_msgs/Pose origin

# The actual octree msg
octomap_msgs/Octomap octomap

================================================================================
MSG: octomap_msgs/Octomap
# A 3D map in binary format, as Octree
Header header

# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
bool binary

# Class id of the contained octree 
string id

# Resolution (in m) of the smallest octree nodes
float64 resolution

# binary serialization of octree, use conversions.h to read and write octrees
int8[] data

================================================================================
MSG: moveit_msgs/MoveGroupSequenceActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveGroupSequenceResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: moveit_msgs/MoveGroupSequenceResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Response comprising information on all sections of the sequence
MotionSequenceResponse response


================================================================================
MSG: moveit_msgs/MotionSequenceResponse
# An error code reflecting what went wrong
MoveItErrorCodes error_code

# The full starting state of the robot at the start of the sequence
RobotState sequence_start

# The trajectories that the planner produced for execution
RobotTrajectory[] planned_trajectories

# The amount of time it took to complete the motion plan
float64 planning_time

================================================================================
MSG: moveit_msgs/MoveItErrorCodes
int32 val

# overall behavior
int32 SUCCESS=1
int32 FAILURE=99999

int32 PLANNING_FAILED=-1
int32 INVALID_MOTION_PLAN=-2
int32 MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3
int32 CONTROL_FAILED=-4
int32 UNABLE_TO_AQUIRE_SENSOR_DATA=-5
int32 TIMED_OUT=-6
int32 PREEMPTED=-7

# planning & kinematics request errors
int32 START_STATE_IN_COLLISION=-10
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-11

int32 GOAL_IN_COLLISION=-12
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-13
int32 GOAL_CONSTRAINTS_VIOLATED=-14

int32 INVALID_GROUP_NAME=-15
int32 INVALID_GOAL_CONSTRAINTS=-16
int32 INVALID_ROBOT_STATE=-17
int32 INVALID_LINK_NAME=-18
int32 INVALID_OBJECT_NAME=-19

# system errors
int32 FRAME_TRANSFORM_FAILURE=-21
int32 COLLISION_CHECKING_UNAVAILABLE=-22
int32 ROBOT_STATE_STALE=-23
int32 SENSOR_INFO_STALE=-24

# kinematics errors
int32 NO_IK_SOLUTION=-31

================================================================================
MSG: moveit_msgs/RobotTrajectory
trajectory_msgs/JointTrajectory joint_trajectory
trajectory_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectory
# The header is used to specify the coordinate frame and the reference time for the trajectory durations
Header header

# A representation of a multi-dof joint trajectory (each point is a transformation)
# Each point along the trajectory will include an array of positions/velocities/accelerations
# that has the same length as the array of joint names, and has the same order of joints as 
# the joint names array.

string[] joint_names
MultiDOFJointTrajectoryPoint[] points

================================================================================
MSG: trajectory_msgs/MultiDOFJointTrajectoryPoint
# Each multi-dof joint can specify a transform (up to 6 DOF)
geometry_msgs/Transform[] transforms

# There can be a velocity specified for the origin of the joint 
geometry_msgs/Twist[] velocities

# There can be an acceleration specified for the origin of the joint 
geometry_msgs/Twist[] accelerations

duration time_from_start

================================================================================
MSG: moveit_msgs/MoveGroupSequenceActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
MoveGroupSequenceFeedback feedback

================================================================================
MSG: moveit_msgs/MoveGroupSequenceFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# The internal state that the move group action currently is in
string state

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['moveit_msgs/MoveGroupSequenceActionGoal','moveit_msgs/MoveGroupSequenceActionResult','moveit_msgs/MoveGroupSequenceActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveGroupSequenceAction, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()
    else:
      self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.request.items)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.items:
        _v1 = val1.req
        _v2 = _v1.workspace_parameters
        _v3 = _v2.header
        _x = _v3.seq
        buff.write(_get_struct_I().pack(_x))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = _v2.min_corner
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v2.max_corner
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v1.start_state
        _v8 = _v7.joint_state
        _v9 = _v8.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v8.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v8.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v8.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.position))
        length = len(_v8.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.velocity))
        length = len(_v8.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.Struct(pattern).pack(*_v8.effort))
        _v11 = _v7.multi_dof_joint_state
        _v12 = _v11.header
        _x = _v12.seq
        buff.write(_get_struct_I().pack(_x))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v11.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v11.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.transforms:
          _v14 = val5.translation
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val5.rotation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v11.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.twist:
          _v16 = val5.linear
          _x = _v16
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v17 = val5.angular
          _x = _v17
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v11.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v11.wrench:
          _v18 = val5.force
          _x = _v18
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v19 = val5.torque
          _x = _v19
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v7.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v7.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v20 = val4.object
          _v21 = _v20.header
          _x = _v21.seq
          buff.write(_get_struct_I().pack(_x))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v20.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v23 = _v20.type
          _x = _v23.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v23.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v20.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v20.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.primitive_poses:
            _v24 = val6.position
            _x = _v24
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v25 = val6.orientation
            _x = _v25
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v20.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.mesh_poses:
            _v26 = val6.position
            _x = _v26
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v27 = val6.orientation
            _x = _v27
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v20.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.planes:
            buff.write(_get_struct_4d().pack(*val6.coef))
          length = len(_v20.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v20.plane_poses:
            _v28 = val6.position
            _x = _v28
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v29 = val6.orientation
            _x = _v29
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v20.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v30 = val4.detach_posture
          _v31 = _v30.header
          _x = _v31.seq
          buff.write(_get_struct_I().pack(_x))
          _v32 = _v31.stamp
          _x = _v32
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v31.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v30.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v30.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v30.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v30.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.positions))
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.velocities))
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.accelerations))
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.effort))
            _v33 = val6.time_from_start
            _x = _v33
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v7.is_diff
        buff.write(_get_struct_B().pack(_x))
        length = len(_v1.goal_constraints)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.goal_constraints:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_constraints:
            _x = val4.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val3.position_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.position_constraints:
            _v34 = val4.header
            _x = _v34.seq
            buff.write(_get_struct_I().pack(_x))
            _v35 = _v34.stamp
            _x = _v35
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v34.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v36 = val4.target_point_offset
            _x = _v36
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v37 = val4.constraint_region
            length = len(_v37.primitives)
            buff.write(_struct_I.pack(length))
            for val6 in _v37.primitives:
              _x = val6.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val6.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val6.dimensions))
            length = len(_v37.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v37.primitive_poses:
              _v38 = val6.position
              _x = _v38
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v39 = val6.orientation
              _x = _v39
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v37.meshes)
            buff.write(_struct_I.pack(length))
            for val6 in _v37.meshes:
              length = len(val6.triangles)
              buff.write(_struct_I.pack(length))
              for val7 in val6.triangles:
                buff.write(_get_struct_3I().pack(*val7.vertex_indices))
              length = len(val6.vertices)
              buff.write(_struct_I.pack(length))
              for val7 in val6.vertices:
                _x = val7
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v37.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v37.mesh_poses:
              _v40 = val6.position
              _x = _v40
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v41 = val6.orientation
              _x = _v41
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val3.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.orientation_constraints:
            _v42 = val4.header
            _x = _v42.seq
            buff.write(_get_struct_I().pack(_x))
            _v43 = _v42.stamp
            _x = _v43
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v42.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v44 = val4.orientation
            _x = _v44
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
          length = len(val3.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.visibility_constraints:
            _x = val4.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v45 = val4.target_pose
            _v46 = _v45.header
            _x = _v46.seq
            buff.write(_get_struct_I().pack(_x))
            _v47 = _v46.stamp
            _x = _v47
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v46.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v48 = _v45.pose
            _v49 = _v48.position
            _x = _v49
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v50 = _v48.orientation
            _x = _v50
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v51 = val4.sensor_pose
            _v52 = _v51.header
            _x = _v52.seq
            buff.write(_get_struct_I().pack(_x))
            _v53 = _v52.stamp
            _x = _v53
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v52.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v54 = _v51.pose
            _v55 = _v54.position
            _x = _v55
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v56 = _v54.orientation
            _x = _v56
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v57 = _v1.path_constraints
        _x = _v57.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v57.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v57.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v57.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v57.position_constraints:
          _v58 = val4.header
          _x = _v58.seq
          buff.write(_get_struct_I().pack(_x))
          _v59 = _v58.stamp
          _x = _v59
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v58.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v60 = val4.target_point_offset
          _x = _v60
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v61 = val4.constraint_region
          length = len(_v61.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v61.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.Struct(pattern).pack(*val6.dimensions))
          length = len(_v61.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v61.primitive_poses:
            _v62 = val6.position
            _x = _v62
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v63 = val6.orientation
            _x = _v63
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v61.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v61.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(_get_struct_3I().pack(*val7.vertex_indices))
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v61.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v61.mesh_poses:
            _v64 = val6.position
            _x = _v64
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v65 = val6.orientation
            _x = _v65
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v57.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v57.orientation_constraints:
          _v66 = val4.header
          _x = _v66.seq
          buff.write(_get_struct_I().pack(_x))
          _v67 = _v66.stamp
          _x = _v67
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v66.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v68 = val4.orientation
          _x = _v68
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(_v57.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v57.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v69 = val4.target_pose
          _v70 = _v69.header
          _x = _v70.seq
          buff.write(_get_struct_I().pack(_x))
          _v71 = _v70.stamp
          _x = _v71
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v70.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v72 = _v69.pose
          _v73 = _v72.position
          _x = _v73
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v74 = _v72.orientation
          _x = _v74
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v75 = val4.sensor_pose
          _v76 = _v75.header
          _x = _v76.seq
          buff.write(_get_struct_I().pack(_x))
          _v77 = _v76.stamp
          _x = _v77
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v76.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v78 = _v75.pose
          _v79 = _v78.position
          _x = _v79
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v80 = _v78.orientation
          _x = _v80
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v81 = _v1.trajectory_constraints
        length = len(_v81.constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v81.constraints:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.joint_constraints:
            _x = val5.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val4.position_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.position_constraints:
            _v82 = val5.header
            _x = _v82.seq
            buff.write(_get_struct_I().pack(_x))
            _v83 = _v82.stamp
            _x = _v83
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v82.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v84 = val5.target_point_offset
            _x = _v84
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v85 = val5.constraint_region
            length = len(_v85.primitives)
            buff.write(_struct_I.pack(length))
            for val7 in _v85.primitives:
              _x = val7.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val7.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(struct.Struct(pattern).pack(*val7.dimensions))
            length = len(_v85.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v85.primitive_poses:
              _v86 = val7.position
              _x = _v86
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v87 = val7.orientation
              _x = _v87
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v85.meshes)
            buff.write(_struct_I.pack(length))
            for val7 in _v85.meshes:
              length = len(val7.triangles)
              buff.write(_struct_I.pack(length))
              for val8 in val7.triangles:
                buff.write(_get_struct_3I().pack(*val8.vertex_indices))
              length = len(val7.vertices)
              buff.write(_struct_I.pack(length))
              for val8 in val7.vertices:
                _x = val8
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v85.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v85.mesh_poses:
              _v88 = val7.position
              _x = _v88
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v89 = val7.orientation
              _x = _v89
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val4.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.orientation_constraints:
            _v90 = val5.header
            _x = _v90.seq
            buff.write(_get_struct_I().pack(_x))
            _v91 = _v90.stamp
            _x = _v91
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v90.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v92 = val5.orientation
            _x = _v92
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
          length = len(val4.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.visibility_constraints:
            _x = val5.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v93 = val5.target_pose
            _v94 = _v93.header
            _x = _v94.seq
            buff.write(_get_struct_I().pack(_x))
            _v95 = _v94.stamp
            _x = _v95
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v94.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v96 = _v93.pose
            _v97 = _v96.position
            _x = _v97
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v98 = _v96.orientation
            _x = _v98
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v99 = val5.sensor_pose
            _v100 = _v99.header
            _x = _v100.seq
            buff.write(_get_struct_I().pack(_x))
            _v101 = _v100.stamp
            _x = _v101
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v100.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v102 = _v99.pose
            _v103 = _v102.position
            _x = _v103
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v104 = _v102.orientation
            _x = _v104
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _x = _v1.planner_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_i3d().pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor))
        _x = val1.blend_radius
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v105 = val1.translation
        _x = _v105
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v106 = val1.rotation
        _x = _v106
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v107 = val1.linear
        _x = _v107
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v108 = val1.angular
        _x = _v108
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v109 = val1.force
        _x = _v109
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v110 = val1.torque
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v111 = val1.object
        _v112 = _v111.header
        _x = _v112.seq
        buff.write(_get_struct_I().pack(_x))
        _v113 = _v112.stamp
        _x = _v113
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v112.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v111.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v114 = _v111.type
        _x = _v114.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v114.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v111.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v111.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v111.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v111.primitive_poses:
          _v115 = val3.position
          _x = _v115
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v116 = val3.orientation
          _x = _v116
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v111.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v111.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v111.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v111.mesh_poses:
          _v117 = val3.position
          _x = _v117
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v118 = val3.orientation
          _x = _v118
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v111.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v111.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v111.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v111.plane_poses:
          _v119 = val3.position
          _x = _v119
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v120 = val3.orientation
          _x = _v120
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v111.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v121 = val1.detach_posture
        _v122 = _v121.header
        _x = _v122.seq
        buff.write(_get_struct_I().pack(_x))
        _v123 = _v122.stamp
        _x = _v123
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v122.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v121.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v121.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v121.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v121.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v124 = val3.time_from_start
          _x = _v124
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v125 = val1.header
        _x = _v125.seq
        buff.write(_get_struct_I().pack(_x))
        _v126 = _v125.stamp
        _x = _v126
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v125.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v127 = val1.transform
        _v128 = _v127.translation
        _x = _v128
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v129 = _v127.rotation
        _x = _v129
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.Struct(pattern).pack(*val1.enabled))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v130 = val1.color
        _x = _v130
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v131 = val1.header
        _x = _v131.seq
        buff.write(_get_struct_I().pack(_x))
        _v132 = _v131.stamp
        _x = _v132
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v131.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v133 = val1.type
        _x = _v133.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v133.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v134 = val2.position
          _x = _v134
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v135 = val2.orientation
          _x = _v135
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_get_struct_3I().pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v136 = val2.position
          _x = _v136
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v137 = val2.orientation
          _x = _v137
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(_get_struct_4d().pack(*val2.coef))
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v138 = val2.position
          _x = _v138
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v139 = val2.orientation
          _x = _v139
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data))
      _x = self
      buff.write(_get_struct_3BidBid3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_result.result.response.sequence_start.joint_state.position))
      length = len(self.action_result.result.response.sequence_start.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_result.result.response.sequence_start.joint_state.velocity))
      length = len(self.action_result.result.response.sequence_start.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.action_result.result.response.sequence_start.joint_state.effort))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms:
        _v140 = val1.translation
        _x = _v140
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v141 = val1.rotation
        _x = _v141
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.twist:
        _v142 = val1.linear
        _x = _v142
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v143 = val1.angular
        _x = _v143
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench:
        _v144 = val1.force
        _x = _v144
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v145 = val1.torque
        _x = _v145
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v146 = val1.object
        _v147 = _v146.header
        _x = _v147.seq
        buff.write(_get_struct_I().pack(_x))
        _v148 = _v147.stamp
        _x = _v148
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v147.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v146.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v149 = _v146.type
        _x = _v149.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v149.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v146.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v146.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.dimensions))
        length = len(_v146.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v146.primitive_poses:
          _v150 = val3.position
          _x = _v150
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v151 = val3.orientation
          _x = _v151
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v146.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v146.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_get_struct_3I().pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v146.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v146.mesh_poses:
          _v152 = val3.position
          _x = _v152
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v153 = val3.orientation
          _x = _v153
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v146.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v146.planes:
          buff.write(_get_struct_4d().pack(*val3.coef))
        length = len(_v146.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v146.plane_poses:
          _v154 = val3.position
          _x = _v154
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v155 = val3.orientation
          _x = _v155
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v146.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v156 = val1.detach_posture
        _v157 = _v156.header
        _x = _v157.seq
        buff.write(_get_struct_I().pack(_x))
        _v158 = _v157.stamp
        _x = _v158
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v157.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v156.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v156.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v156.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v156.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v159 = val3.time_from_start
          _x = _v159
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_result.result.response.sequence_start.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.action_result.result.response.planned_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.planned_trajectories:
        _v160 = val1.joint_trajectory
        _v161 = _v160.header
        _x = _v161.seq
        buff.write(_get_struct_I().pack(_x))
        _v162 = _v161.stamp
        _x = _v162
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v161.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v160.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v160.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v160.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v160.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.Struct(pattern).pack(*val3.effort))
          _v163 = val3.time_from_start
          _x = _v163
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v164 = val1.multi_dof_joint_trajectory
        _v165 = _v164.header
        _x = _v165.seq
        buff.write(_get_struct_I().pack(_x))
        _v166 = _v165.stamp
        _x = _v166
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v165.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v164.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v164.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v164.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v164.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v167 = val4.translation
            _x = _v167
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v168 = val4.rotation
            _x = _v168
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v169 = val4.linear
            _x = _v169
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v170 = val4.angular
            _x = _v170
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v171 = val4.linear
            _x = _v171
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v172 = val4.angular
            _x = _v172
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v173 = val3.time_from_start
          _x = _v173
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.items = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.MotionSequenceItem()
        _v174 = val1.req
        _v175 = _v174.workspace_parameters
        _v176 = _v175.header
        start = end
        end += 4
        (_v176.seq,) = _get_struct_I().unpack(str[start:end])
        _v177 = _v176.stamp
        _x = _v177
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v176.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v176.frame_id = str[start:end]
        _v178 = _v175.min_corner
        _x = _v178
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v179 = _v175.max_corner
        _x = _v179
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v180 = _v174.start_state
        _v181 = _v180.joint_state
        _v182 = _v181.header
        start = end
        end += 4
        (_v182.seq,) = _get_struct_I().unpack(str[start:end])
        _v183 = _v182.stamp
        _x = _v183
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v182.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v182.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v181.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v181.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v181.position = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v181.velocity = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v181.effort = s.unpack(str[start:end])
        _v184 = _v180.multi_dof_joint_state
        _v185 = _v184.header
        start = end
        end += 4
        (_v185.seq,) = _get_struct_I().unpack(str[start:end])
        _v186 = _v185.stamp
        _x = _v186
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v185.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v185.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v184.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v184.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v184.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v187 = val5.translation
          _x = _v187
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v188 = val5.rotation
          _x = _v188
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v184.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v184.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v189 = val5.linear
          _x = _v189
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v190 = val5.angular
          _x = _v190
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v184.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v184.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v191 = val5.force
          _x = _v191
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v192 = val5.torque
          _x = _v192
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v184.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v180.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v193 = val4.object
          _v194 = _v193.header
          start = end
          end += 4
          (_v194.seq,) = _get_struct_I().unpack(str[start:end])
          _v195 = _v194.stamp
          _x = _v195
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v194.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v194.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v193.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v193.id = str[start:end]
          _v196 = _v193.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v196.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v196.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v196.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v196.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v193.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v197 = val6.position
            _x = _v197
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v198 = val6.orientation
            _x = _v198
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v193.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v193.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v199 = val6.position
            _x = _v199
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v200 = val6.orientation
            _x = _v200
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v193.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = _get_struct_4d().unpack(str[start:end])
            _v193.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v193.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v201 = val6.position
            _x = _v201
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v202 = val6.orientation
            _x = _v202
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v193.plane_poses.append(val6)
          start = end
          end += 1
          (_v193.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v203 = val4.detach_posture
          _v204 = _v203.header
          start = end
          end += 4
          (_v204.seq,) = _get_struct_I().unpack(str[start:end])
          _v205 = _v204.stamp
          _x = _v205
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v204.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v204.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v203.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v203.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v203.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = s.unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = s.unpack(str[start:end])
            _v206 = val6.time_from_start
            _x = _v206
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v203.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v180.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v180.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v180.is_diff = bool(_v180.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v174.goal_constraints = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.joint_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.joint_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.position_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.PositionConstraint()
            _v207 = val4.header
            start = end
            end += 4
            (_v207.seq,) = _get_struct_I().unpack(str[start:end])
            _v208 = _v207.stamp
            _x = _v208
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v207.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v207.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _v209 = val4.target_point_offset
            _x = _v209
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v210 = val4.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v210.primitives = []
            for i in range(0, length):
              val6 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val6.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.dimensions = s.unpack(str[start:end])
              _v210.primitives.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v210.primitive_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v211 = val6.position
              _x = _v211
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v212 = val6.orientation
              _x = _v212
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v210.primitive_poses.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v210.meshes = []
            for i in range(0, length):
              val6 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.triangles = []
              for i in range(0, length):
                val7 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
                val6.triangles.append(val7)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.vertices = []
              for i in range(0, length):
                val7 = geometry_msgs.msg.Point()
                _x = val7
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val6.vertices.append(val7)
              _v210.meshes.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v210.mesh_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v213 = val6.position
              _x = _v213
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v214 = val6.orientation
              _x = _v214
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v210.mesh_poses.append(val6)
            start = end
            end += 8
            (val4.weight,) = _get_struct_d().unpack(str[start:end])
            val3.position_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.orientation_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.OrientationConstraint()
            _v215 = val4.header
            start = end
            end += 4
            (_v215.seq,) = _get_struct_I().unpack(str[start:end])
            _v216 = _v215.stamp
            _x = _v216
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v215.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v215.frame_id = str[start:end]
            _v217 = val4.orientation
            _x = _v217
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.orientation_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.visibility_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v218 = val4.target_pose
            _v219 = _v218.header
            start = end
            end += 4
            (_v219.seq,) = _get_struct_I().unpack(str[start:end])
            _v220 = _v219.stamp
            _x = _v220
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v219.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v219.frame_id = str[start:end]
            _v221 = _v218.pose
            _v222 = _v221.position
            _x = _v222
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v223 = _v221.orientation
            _x = _v223
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v224 = val4.sensor_pose
            _v225 = _v224.header
            start = end
            end += 4
            (_v225.seq,) = _get_struct_I().unpack(str[start:end])
            _v226 = _v225.stamp
            _x = _v226
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v225.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v225.frame_id = str[start:end]
            _v227 = _v224.pose
            _v228 = _v227.position
            _x = _v228
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v229 = _v227.orientation
            _x = _v229
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val4
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val3.visibility_constraints.append(val4)
          _v174.goal_constraints.append(val3)
        _v230 = _v174.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v230.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v230.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v230.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v230.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v230.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v231 = val4.header
          start = end
          end += 4
          (_v231.seq,) = _get_struct_I().unpack(str[start:end])
          _v232 = _v231.stamp
          _x = _v232
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v231.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v231.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v233 = val4.target_point_offset
          _x = _v233
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v234 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v234.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = s.unpack(str[start:end])
            _v234.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v234.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v235 = val6.position
            _x = _v235
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v236 = val6.orientation
            _x = _v236
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v234.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v234.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = _get_struct_3I().unpack(str[start:end])
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v234.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v234.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v237 = val6.position
            _x = _v237
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v238 = val6.orientation
            _x = _v238
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v234.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v230.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v230.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v239 = val4.header
          start = end
          end += 4
          (_v239.seq,) = _get_struct_I().unpack(str[start:end])
          _v240 = _v239.stamp
          _x = _v240
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v239.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v239.frame_id = str[start:end]
          _v241 = val4.orientation
          _x = _v241
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v230.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v230.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v242 = val4.target_pose
          _v243 = _v242.header
          start = end
          end += 4
          (_v243.seq,) = _get_struct_I().unpack(str[start:end])
          _v244 = _v243.stamp
          _x = _v244
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v243.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v243.frame_id = str[start:end]
          _v245 = _v242.pose
          _v246 = _v245.position
          _x = _v246
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v247 = _v245.orientation
          _x = _v247
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v248 = val4.sensor_pose
          _v249 = _v248.header
          start = end
          end += 4
          (_v249.seq,) = _get_struct_I().unpack(str[start:end])
          _v250 = _v249.stamp
          _x = _v250
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v249.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v249.frame_id = str[start:end]
          _v251 = _v248.pose
          _v252 = _v251.position
          _x = _v252
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v253 = _v251.orientation
          _x = _v253
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v230.visibility_constraints.append(val4)
        _v254 = _v174.trajectory_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v254.constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.joint_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.joint_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.joint_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.position_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.PositionConstraint()
            _v255 = val5.header
            start = end
            end += 4
            (_v255.seq,) = _get_struct_I().unpack(str[start:end])
            _v256 = _v255.stamp
            _x = _v256
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v255.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v255.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _v257 = val5.target_point_offset
            _x = _v257
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v258 = val5.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v258.primitives = []
            for i in range(0, length):
              val7 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val7.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val7.dimensions = s.unpack(str[start:end])
              _v258.primitives.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v258.primitive_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v259 = val7.position
              _x = _v259
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v260 = val7.orientation
              _x = _v260
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v258.primitive_poses.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v258.meshes = []
            for i in range(0, length):
              val7 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.triangles = []
              for i in range(0, length):
                val8 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val8.vertex_indices = _get_struct_3I().unpack(str[start:end])
                val7.triangles.append(val8)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.vertices = []
              for i in range(0, length):
                val8 = geometry_msgs.msg.Point()
                _x = val8
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val7.vertices.append(val8)
              _v258.meshes.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v258.mesh_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v261 = val7.position
              _x = _v261
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v262 = val7.orientation
              _x = _v262
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v258.mesh_poses.append(val7)
            start = end
            end += 8
            (val5.weight,) = _get_struct_d().unpack(str[start:end])
            val4.position_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.orientation_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.OrientationConstraint()
            _v263 = val5.header
            start = end
            end += 4
            (_v263.seq,) = _get_struct_I().unpack(str[start:end])
            _v264 = _v263.stamp
            _x = _v264
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v263.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v263.frame_id = str[start:end]
            _v265 = val5.orientation
            _x = _v265
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.orientation_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.visibility_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val5.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v266 = val5.target_pose
            _v267 = _v266.header
            start = end
            end += 4
            (_v267.seq,) = _get_struct_I().unpack(str[start:end])
            _v268 = _v267.stamp
            _x = _v268
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v267.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v267.frame_id = str[start:end]
            _v269 = _v266.pose
            _v270 = _v269.position
            _x = _v270
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v271 = _v269.orientation
            _x = _v271
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val5.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v272 = val5.sensor_pose
            _v273 = _v272.header
            start = end
            end += 4
            (_v273.seq,) = _get_struct_I().unpack(str[start:end])
            _v274 = _v273.stamp
            _x = _v274
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v273.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v273.frame_id = str[start:end]
            _v275 = _v272.pose
            _v276 = _v275.position
            _x = _v276
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v277 = _v275.orientation
            _x = _v277
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val5
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val4.visibility_constraints.append(val5)
          _v254.constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v174.planner_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v174.planner_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v174.group_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v174.group_name = str[start:end]
        _x = _v174
        start = end
        end += 28
        (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.blend_radius,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.items.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v278 = val1.translation
        _x = _v278
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v279 = val1.rotation
        _x = _v279
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v280 = val1.linear
        _x = _v280
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v281 = val1.angular
        _x = _v281
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v282 = val1.force
        _x = _v282
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v283 = val1.torque
        _x = _v283
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v284 = val1.object
        _v285 = _v284.header
        start = end
        end += 4
        (_v285.seq,) = _get_struct_I().unpack(str[start:end])
        _v286 = _v285.stamp
        _x = _v286
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v285.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v285.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v284.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v284.id = str[start:end]
        _v287 = _v284.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v287.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v287.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v287.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v287.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v284.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v288 = val3.position
          _x = _v288
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v289 = val3.orientation
          _x = _v289
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v284.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v284.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v290 = val3.position
          _x = _v290
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v291 = val3.orientation
          _x = _v291
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v284.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v284.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v284.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v292 = val3.position
          _x = _v292
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v293 = val3.orientation
          _x = _v293
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v284.plane_poses.append(val3)
        start = end
        end += 1
        (_v284.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v294 = val1.detach_posture
        _v295 = _v294.header
        start = end
        end += 4
        (_v295.seq,) = _get_struct_I().unpack(str[start:end])
        _v296 = _v295.stamp
        _x = _v296
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v295.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v295.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v294.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v294.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v297 = val3.time_from_start
          _x = _v297
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v294.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v298 = val1.header
        start = end
        end += 4
        (_v298.seq,) = _get_struct_I().unpack(str[start:end])
        _v299 = _v298.stamp
        _x = _v299
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v298.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v298.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v300 = val1.transform
        _v301 = _v300.translation
        _x = _v301
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v302 = _v300.rotation
        _x = _v302
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = s.unpack(str[start:end])
        val1.enabled = list(map(bool, val1.enabled))
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = s.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v303 = val1.color
        _x = _v303
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v304 = val1.header
        start = end
        end += 4
        (_v304.seq,) = _get_struct_I().unpack(str[start:end])
        _v305 = _v304.stamp
        _x = _v305
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v304.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v304.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v306 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v306.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v306.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v306.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v306.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = s.unpack(str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v307 = val2.position
          _x = _v307
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v308 = val2.orientation
          _x = _v308
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v309 = val2.position
          _x = _v309
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v310 = val2.orientation
          _x = _v310
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = _get_struct_4d().unpack(str[start:end])
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v311 = val2.position
          _x = _v311
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v312 = val2.orientation
          _x = _v312
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3BidBid3I().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.is_diff)
      self.action_goal.goal.planning_options.plan_only = bool(self.action_goal.goal.planning_options.plan_only)
      self.action_goal.goal.planning_options.look_around = bool(self.action_goal.goal.planning_options.look_around)
      self.action_goal.goal.planning_options.replan = bool(self.action_goal.goal.planning_options.replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.position = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.velocity = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.effort = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v313 = val1.translation
        _x = _v313
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v314 = val1.rotation
        _x = _v314
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v315 = val1.linear
        _x = _v315
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v316 = val1.angular
        _x = _v316
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v317 = val1.force
        _x = _v317
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v318 = val1.torque
        _x = _v318
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v319 = val1.object
        _v320 = _v319.header
        start = end
        end += 4
        (_v320.seq,) = _get_struct_I().unpack(str[start:end])
        _v321 = _v320.stamp
        _x = _v321
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v320.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v320.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v319.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v319.id = str[start:end]
        _v322 = _v319.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v322.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v322.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v322.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v322.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v319.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = s.unpack(str[start:end])
          _v319.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v319.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v323 = val3.position
          _x = _v323
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v324 = val3.orientation
          _x = _v324
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v319.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v319.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _get_struct_3I().unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v319.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v319.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v325 = val3.position
          _x = _v325
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v326 = val3.orientation
          _x = _v326
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v319.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v319.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = _get_struct_4d().unpack(str[start:end])
          _v319.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v319.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v327 = val3.position
          _x = _v327
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v328 = val3.orientation
          _x = _v328
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v319.plane_poses.append(val3)
        start = end
        end += 1
        (_v319.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v329 = val1.detach_posture
        _v330 = _v329.header
        start = end
        end += 4
        (_v330.seq,) = _get_struct_I().unpack(str[start:end])
        _v331 = _v330.stamp
        _x = _v331
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v330.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v330.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v329.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v329.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v329.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v332 = val3.time_from_start
          _x = _v332
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v329.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_result.result.response.sequence_start.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.response.sequence_start.is_diff = bool(self.action_result.result.response.sequence_start.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.planned_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v333 = val1.joint_trajectory
        _v334 = _v333.header
        start = end
        end += 4
        (_v334.seq,) = _get_struct_I().unpack(str[start:end])
        _v335 = _v334.stamp
        _x = _v335
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v334.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v334.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v333.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v333.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v333.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = s.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = s.unpack(str[start:end])
          _v336 = val3.time_from_start
          _x = _v336
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v333.points.append(val3)
        _v337 = val1.multi_dof_joint_trajectory
        _v338 = _v337.header
        start = end
        end += 4
        (_v338.seq,) = _get_struct_I().unpack(str[start:end])
        _v339 = _v338.stamp
        _x = _v339
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v338.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v338.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v337.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v337.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v337.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v340 = val4.translation
            _x = _v340
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v341 = val4.rotation
            _x = _v341
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v342 = val4.linear
            _x = _v342
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v343 = val4.angular
            _x = _v343
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v344 = val4.linear
            _x = _v344
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v345 = val4.angular
            _x = _v345
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v346 = val3.time_from_start
          _x = _v346
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v337.points.append(val3)
        self.action_result.result.response.planned_trajectories.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.request.items)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.request.items:
        _v347 = val1.req
        _v348 = _v347.workspace_parameters
        _v349 = _v348.header
        _x = _v349.seq
        buff.write(_get_struct_I().pack(_x))
        _v350 = _v349.stamp
        _x = _v350
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v349.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v351 = _v348.min_corner
        _x = _v351
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v352 = _v348.max_corner
        _x = _v352
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v353 = _v347.start_state
        _v354 = _v353.joint_state
        _v355 = _v354.header
        _x = _v355.seq
        buff.write(_get_struct_I().pack(_x))
        _v356 = _v355.stamp
        _x = _v356
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v355.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v354.name)
        buff.write(_struct_I.pack(length))
        for val5 in _v354.name:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v354.position)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v354.position.tostring())
        length = len(_v354.velocity)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v354.velocity.tostring())
        length = len(_v354.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v354.effort.tostring())
        _v357 = _v353.multi_dof_joint_state
        _v358 = _v357.header
        _x = _v358.seq
        buff.write(_get_struct_I().pack(_x))
        _v359 = _v358.stamp
        _x = _v359
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v358.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v357.joint_names)
        buff.write(_struct_I.pack(length))
        for val5 in _v357.joint_names:
          length = len(val5)
          if python3 or type(val5) == unicode:
            val5 = val5.encode('utf-8')
            length = len(val5)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
        length = len(_v357.transforms)
        buff.write(_struct_I.pack(length))
        for val5 in _v357.transforms:
          _v360 = val5.translation
          _x = _v360
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v361 = val5.rotation
          _x = _v361
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v357.twist)
        buff.write(_struct_I.pack(length))
        for val5 in _v357.twist:
          _v362 = val5.linear
          _x = _v362
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v363 = val5.angular
          _x = _v363
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v357.wrench)
        buff.write(_struct_I.pack(length))
        for val5 in _v357.wrench:
          _v364 = val5.force
          _x = _v364
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v365 = val5.torque
          _x = _v365
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v353.attached_collision_objects)
        buff.write(_struct_I.pack(length))
        for val4 in _v353.attached_collision_objects:
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v366 = val4.object
          _v367 = _v366.header
          _x = _v367.seq
          buff.write(_get_struct_I().pack(_x))
          _v368 = _v367.stamp
          _x = _v368
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v367.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v366.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v369 = _v366.type
          _x = _v369.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = _v369.db
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v366.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v366.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v366.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v366.primitive_poses:
            _v370 = val6.position
            _x = _v370
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v371 = val6.orientation
            _x = _v371
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v366.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v366.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v366.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v366.mesh_poses:
            _v372 = val6.position
            _x = _v372
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v373 = val6.orientation
            _x = _v373
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v366.planes)
          buff.write(_struct_I.pack(length))
          for val6 in _v366.planes:
            buff.write(val6.coef.tostring())
          length = len(_v366.plane_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v366.plane_poses:
            _v374 = val6.position
            _x = _v374
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v375 = val6.orientation
            _x = _v375
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = _v366.operation
          buff.write(_get_struct_b().pack(_x))
          length = len(val4.touch_links)
          buff.write(_struct_I.pack(length))
          for val5 in val4.touch_links:
            length = len(val5)
            if python3 or type(val5) == unicode:
              val5 = val5.encode('utf-8')
              length = len(val5)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val5))
          _v376 = val4.detach_posture
          _v377 = _v376.header
          _x = _v377.seq
          buff.write(_get_struct_I().pack(_x))
          _v378 = _v377.stamp
          _x = _v378
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v377.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(_v376.joint_names)
          buff.write(_struct_I.pack(length))
          for val6 in _v376.joint_names:
            length = len(val6)
            if python3 or type(val6) == unicode:
              val6 = val6.encode('utf-8')
              length = len(val6)
            buff.write(struct.Struct('<I%ss'%length).pack(length, val6))
          length = len(_v376.points)
          buff.write(_struct_I.pack(length))
          for val6 in _v376.points:
            length = len(val6.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.positions.tostring())
            length = len(val6.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.velocities.tostring())
            length = len(val6.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.accelerations.tostring())
            length = len(val6.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.effort.tostring())
            _v379 = val6.time_from_start
            _x = _v379
            buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        _x = _v353.is_diff
        buff.write(_get_struct_B().pack(_x))
        length = len(_v347.goal_constraints)
        buff.write(_struct_I.pack(length))
        for val3 in _v347.goal_constraints:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val3.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.joint_constraints:
            _x = val4.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val3.position_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.position_constraints:
            _v380 = val4.header
            _x = _v380.seq
            buff.write(_get_struct_I().pack(_x))
            _v381 = _v380.stamp
            _x = _v381
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v380.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v382 = val4.target_point_offset
            _x = _v382
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v383 = val4.constraint_region
            length = len(_v383.primitives)
            buff.write(_struct_I.pack(length))
            for val6 in _v383.primitives:
              _x = val6.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val6.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val6.dimensions.tostring())
            length = len(_v383.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v383.primitive_poses:
              _v384 = val6.position
              _x = _v384
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v385 = val6.orientation
              _x = _v385
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v383.meshes)
            buff.write(_struct_I.pack(length))
            for val6 in _v383.meshes:
              length = len(val6.triangles)
              buff.write(_struct_I.pack(length))
              for val7 in val6.triangles:
                buff.write(val7.vertex_indices.tostring())
              length = len(val6.vertices)
              buff.write(_struct_I.pack(length))
              for val7 in val6.vertices:
                _x = val7
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v383.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val6 in _v383.mesh_poses:
              _v386 = val6.position
              _x = _v386
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v387 = val6.orientation
              _x = _v387
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val3.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.orientation_constraints:
            _v388 = val4.header
            _x = _v388.seq
            buff.write(_get_struct_I().pack(_x))
            _v389 = _v388.stamp
            _x = _v389
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v388.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v390 = val4.orientation
            _x = _v390
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val4
            buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
          length = len(val3.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val4 in val3.visibility_constraints:
            _x = val4.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v391 = val4.target_pose
            _v392 = _v391.header
            _x = _v392.seq
            buff.write(_get_struct_I().pack(_x))
            _v393 = _v392.stamp
            _x = _v393
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v392.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v394 = _v391.pose
            _v395 = _v394.position
            _x = _v395
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v396 = _v394.orientation
            _x = _v396
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v397 = val4.sensor_pose
            _v398 = _v397.header
            _x = _v398.seq
            buff.write(_get_struct_I().pack(_x))
            _v399 = _v398.stamp
            _x = _v399
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v398.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v400 = _v397.pose
            _v401 = _v400.position
            _x = _v401
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v402 = _v400.orientation
            _x = _v402
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val4
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v403 = _v347.path_constraints
        _x = _v403.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v403.joint_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v403.joint_constraints:
          _x = val4.joint_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
        length = len(_v403.position_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v403.position_constraints:
          _v404 = val4.header
          _x = _v404.seq
          buff.write(_get_struct_I().pack(_x))
          _v405 = _v404.stamp
          _x = _v405
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v404.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v406 = val4.target_point_offset
          _x = _v406
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v407 = val4.constraint_region
          length = len(_v407.primitives)
          buff.write(_struct_I.pack(length))
          for val6 in _v407.primitives:
            _x = val6.type
            buff.write(_get_struct_B().pack(_x))
            length = len(val6.dimensions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val6.dimensions.tostring())
          length = len(_v407.primitive_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v407.primitive_poses:
            _v408 = val6.position
            _x = _v408
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v409 = val6.orientation
            _x = _v409
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(_v407.meshes)
          buff.write(_struct_I.pack(length))
          for val6 in _v407.meshes:
            length = len(val6.triangles)
            buff.write(_struct_I.pack(length))
            for val7 in val6.triangles:
              buff.write(val7.vertex_indices.tostring())
            length = len(val6.vertices)
            buff.write(_struct_I.pack(length))
            for val7 in val6.vertices:
              _x = val7
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(_v407.mesh_poses)
          buff.write(_struct_I.pack(length))
          for val6 in _v407.mesh_poses:
            _v410 = val6.position
            _x = _v410
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v411 = val6.orientation
            _x = _v411
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.weight
          buff.write(_get_struct_d().pack(_x))
        length = len(_v403.orientation_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v403.orientation_constraints:
          _v412 = val4.header
          _x = _v412.seq
          buff.write(_get_struct_I().pack(_x))
          _v413 = _v412.stamp
          _x = _v413
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v412.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v414 = val4.orientation
          _x = _v414
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.link_name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val4
          buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
        length = len(_v403.visibility_constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v403.visibility_constraints:
          _x = val4.target_radius
          buff.write(_get_struct_d().pack(_x))
          _v415 = val4.target_pose
          _v416 = _v415.header
          _x = _v416.seq
          buff.write(_get_struct_I().pack(_x))
          _v417 = _v416.stamp
          _x = _v417
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v416.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v418 = _v415.pose
          _v419 = _v418.position
          _x = _v419
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v420 = _v418.orientation
          _x = _v420
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4.cone_sides
          buff.write(_get_struct_i().pack(_x))
          _v421 = val4.sensor_pose
          _v422 = _v421.header
          _x = _v422.seq
          buff.write(_get_struct_I().pack(_x))
          _v423 = _v422.stamp
          _x = _v423
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v422.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v424 = _v421.pose
          _v425 = _v424.position
          _x = _v425
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v426 = _v424.orientation
          _x = _v426
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _x = val4
          buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _v427 = _v347.trajectory_constraints
        length = len(_v427.constraints)
        buff.write(_struct_I.pack(length))
        for val4 in _v427.constraints:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          length = len(val4.joint_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.joint_constraints:
            _x = val5.joint_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
          length = len(val4.position_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.position_constraints:
            _v428 = val5.header
            _x = _v428.seq
            buff.write(_get_struct_I().pack(_x))
            _v429 = _v428.stamp
            _x = _v429
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v428.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v430 = val5.target_point_offset
            _x = _v430
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v431 = val5.constraint_region
            length = len(_v431.primitives)
            buff.write(_struct_I.pack(length))
            for val7 in _v431.primitives:
              _x = val7.type
              buff.write(_get_struct_B().pack(_x))
              length = len(val7.dimensions)
              buff.write(_struct_I.pack(length))
              pattern = '<%sd'%length
              buff.write(val7.dimensions.tostring())
            length = len(_v431.primitive_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v431.primitive_poses:
              _v432 = val7.position
              _x = _v432
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v433 = val7.orientation
              _x = _v433
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            length = len(_v431.meshes)
            buff.write(_struct_I.pack(length))
            for val7 in _v431.meshes:
              length = len(val7.triangles)
              buff.write(_struct_I.pack(length))
              for val8 in val7.triangles:
                buff.write(val8.vertex_indices.tostring())
              length = len(val7.vertices)
              buff.write(_struct_I.pack(length))
              for val8 in val7.vertices:
                _x = val8
                buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            length = len(_v431.mesh_poses)
            buff.write(_struct_I.pack(length))
            for val7 in _v431.mesh_poses:
              _v434 = val7.position
              _x = _v434
              buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
              _v435 = val7.orientation
              _x = _v435
              buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.weight
            buff.write(_get_struct_d().pack(_x))
          length = len(val4.orientation_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.orientation_constraints:
            _v436 = val5.header
            _x = _v436.seq
            buff.write(_get_struct_I().pack(_x))
            _v437 = _v436.stamp
            _x = _v437
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v436.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v438 = val5.orientation
            _x = _v438
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.link_name
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val5
            buff.write(_get_struct_4d().pack(_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight))
          length = len(val4.visibility_constraints)
          buff.write(_struct_I.pack(length))
          for val5 in val4.visibility_constraints:
            _x = val5.target_radius
            buff.write(_get_struct_d().pack(_x))
            _v439 = val5.target_pose
            _v440 = _v439.header
            _x = _v440.seq
            buff.write(_get_struct_I().pack(_x))
            _v441 = _v440.stamp
            _x = _v441
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v440.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v442 = _v439.pose
            _v443 = _v442.position
            _x = _v443
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v444 = _v442.orientation
            _x = _v444
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5.cone_sides
            buff.write(_get_struct_i().pack(_x))
            _v445 = val5.sensor_pose
            _v446 = _v445.header
            _x = _v446.seq
            buff.write(_get_struct_I().pack(_x))
            _v447 = _v446.stamp
            _x = _v447
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v446.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _v448 = _v445.pose
            _v449 = _v448.position
            _x = _v449
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v450 = _v448.orientation
            _x = _v450
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
            _x = val5
            buff.write(_get_struct_2dBd().pack(_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight))
        _x = _v347.planner_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v347.group_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v347
        buff.write(_get_struct_i3d().pack(_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor))
        _x = val1.blend_radius
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms:
        _v451 = val1.translation
        _x = _v451
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v452 = val1.rotation
        _x = _v452
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist:
        _v453 = val1.linear
        _x = _v453
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v454 = val1.angular
        _x = _v454
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench:
        _v455 = val1.force
        _x = _v455
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v456 = val1.torque
        _x = _v456
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v457 = val1.object
        _v458 = _v457.header
        _x = _v458.seq
        buff.write(_get_struct_I().pack(_x))
        _v459 = _v458.stamp
        _x = _v459
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v458.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v457.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v460 = _v457.type
        _x = _v460.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v460.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v457.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v457.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v457.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v457.primitive_poses:
          _v461 = val3.position
          _x = _v461
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v462 = val3.orientation
          _x = _v462
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v457.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v457.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v457.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v457.mesh_poses:
          _v463 = val3.position
          _x = _v463
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v464 = val3.orientation
          _x = _v464
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v457.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v457.planes:
          buff.write(val3.coef.tostring())
        length = len(_v457.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v457.plane_poses:
          _v465 = val3.position
          _x = _v465
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v466 = val3.orientation
          _x = _v466
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v457.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v467 = val1.detach_posture
        _v468 = _v467.header
        _x = _v468.seq
        buff.write(_get_struct_I().pack(_x))
        _v469 = _v468.stamp
        _x = _v469
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v468.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v467.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v467.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v467.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v467.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v470 = val3.time_from_start
          _x = _v470
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms:
        _v471 = val1.header
        _x = _v471.seq
        buff.write(_get_struct_I().pack(_x))
        _v472 = _v471.stamp
        _x = _v472
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v471.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v473 = val1.transform
        _v474 = _v473.translation
        _x = _v474
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v475 = _v473.rotation
        _x = _v475
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values.tostring())
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.padding
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.link_scale)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.link_scale:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.scale
        buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.object_colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.object_colors:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v476 = val1.color
        _x = _v476
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects:
        _v477 = val1.header
        _x = _v477.seq
        buff.write(_get_struct_I().pack(_x))
        _v478 = _v477.stamp
        _x = _v478
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v477.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v479 = val1.type
        _x = _v479.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v479.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v480 = val2.position
          _x = _v480
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v481 = val2.orientation
          _x = _v481
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v482 = val2.position
          _x = _v482
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v483 = val2.orientation
          _x = _v483
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.planes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.planes:
          buff.write(val2.coef.tostring())
        length = len(val1.plane_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.plane_poses:
          _v484 = val2.position
          _x = _v484
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v485 = val2.orientation
          _x = _v485
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1.operation
        buff.write(_get_struct_b().pack(_x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution
      buff.write(_get_struct_d().pack(_x))
      length = len(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data.tostring())
      _x = self
      buff.write(_get_struct_3BidBid3I().pack(_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i3I().pack(_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.response.sequence_start.joint_state.position.tostring())
      length = len(self.action_result.result.response.sequence_start.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.response.sequence_start.joint_state.velocity.tostring())
      length = len(self.action_result.result.response.sequence_start.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.action_result.result.response.sequence_start.joint_state.effort.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs))
      _x = self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms:
        _v486 = val1.translation
        _x = _v486
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v487 = val1.rotation
        _x = _v487
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.twist)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.twist:
        _v488 = val1.linear
        _x = _v488
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v489 = val1.angular
        _x = _v489
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench:
        _v490 = val1.force
        _x = _v490
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v491 = val1.torque
        _x = _v491
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.action_result.result.response.sequence_start.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.sequence_start.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v492 = val1.object
        _v493 = _v492.header
        _x = _v493.seq
        buff.write(_get_struct_I().pack(_x))
        _v494 = _v493.stamp
        _x = _v494
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v493.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v492.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v495 = _v492.type
        _x = _v495.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v495.db
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v492.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v492.primitives:
          _x = val3.type
          buff.write(_get_struct_B().pack(_x))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v492.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v492.primitive_poses:
          _v496 = val3.position
          _x = _v496
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v497 = val3.orientation
          _x = _v497
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v492.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v492.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(_v492.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v492.mesh_poses:
          _v498 = val3.position
          _x = _v498
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v499 = val3.orientation
          _x = _v499
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v492.planes)
        buff.write(_struct_I.pack(length))
        for val3 in _v492.planes:
          buff.write(val3.coef.tostring())
        length = len(_v492.plane_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v492.plane_poses:
          _v500 = val3.position
          _x = _v500
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v501 = val3.orientation
          _x = _v501
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _x = _v492.operation
        buff.write(_get_struct_b().pack(_x))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _v502 = val1.detach_posture
        _v503 = _v502.header
        _x = _v503.seq
        buff.write(_get_struct_I().pack(_x))
        _v504 = _v503.stamp
        _x = _v504
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v503.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v502.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v502.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v502.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v502.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v505 = val3.time_from_start
          _x = _v505
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _x = val1.weight
        buff.write(_get_struct_d().pack(_x))
      _x = self.action_result.result.response.sequence_start.is_diff
      buff.write(_get_struct_B().pack(_x))
      length = len(self.action_result.result.response.planned_trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.response.planned_trajectories:
        _v506 = val1.joint_trajectory
        _v507 = _v506.header
        _x = _v507.seq
        buff.write(_get_struct_I().pack(_x))
        _v508 = _v507.stamp
        _x = _v508
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v507.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v506.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v506.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v506.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v506.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v509 = val3.time_from_start
          _x = _v509
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v510 = val1.multi_dof_joint_trajectory
        _v511 = _v510.header
        _x = _v511.seq
        buff.write(_get_struct_I().pack(_x))
        _v512 = _v511.stamp
        _x = _v512
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v511.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v510.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v510.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val3))
        length = len(_v510.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v510.points:
          length = len(val3.transforms)
          buff.write(_struct_I.pack(length))
          for val4 in val3.transforms:
            _v513 = val4.translation
            _x = _v513
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v514 = val4.rotation
            _x = _v514
            buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          for val4 in val3.velocities:
            _v515 = val4.linear
            _x = _v515
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v516 = val4.angular
            _x = _v516
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          for val4 in val3.accelerations:
            _v517 = val4.linear
            _x = _v517
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
            _v518 = val4.angular
            _x = _v518
            buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v519 = val3.time_from_start
          _x = _v519
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_d3I().pack(_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.feedback.state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = moveit_msgs.msg.MoveGroupSequenceActionGoal()
      if self.action_result is None:
        self.action_result = moveit_msgs.msg.MoveGroupSequenceActionResult()
      if self.action_feedback is None:
        self.action_feedback = moveit_msgs.msg.MoveGroupSequenceActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.request.items = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.MotionSequenceItem()
        _v520 = val1.req
        _v521 = _v520.workspace_parameters
        _v522 = _v521.header
        start = end
        end += 4
        (_v522.seq,) = _get_struct_I().unpack(str[start:end])
        _v523 = _v522.stamp
        _x = _v523
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v522.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v522.frame_id = str[start:end]
        _v524 = _v521.min_corner
        _x = _v524
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v525 = _v521.max_corner
        _x = _v525
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v526 = _v520.start_state
        _v527 = _v526.joint_state
        _v528 = _v527.header
        start = end
        end += 4
        (_v528.seq,) = _get_struct_I().unpack(str[start:end])
        _v529 = _v528.stamp
        _x = _v529
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v528.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v528.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v527.name = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v527.name.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v527.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v527.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v527.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v530 = _v526.multi_dof_joint_state
        _v531 = _v530.header
        start = end
        end += 4
        (_v531.seq,) = _get_struct_I().unpack(str[start:end])
        _v532 = _v531.stamp
        _x = _v532
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v531.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v531.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v530.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val5 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val5 = str[start:end]
          _v530.joint_names.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v530.transforms = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Transform()
          _v533 = val5.translation
          _x = _v533
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v534 = val5.rotation
          _x = _v534
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v530.transforms.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v530.twist = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Twist()
          _v535 = val5.linear
          _x = _v535
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v536 = val5.angular
          _x = _v536
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v530.twist.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v530.wrench = []
        for i in range(0, length):
          val5 = geometry_msgs.msg.Wrench()
          _v537 = val5.force
          _x = _v537
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v538 = val5.torque
          _x = _v538
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v530.wrench.append(val5)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v526.attached_collision_objects = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.AttachedCollisionObject()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v539 = val4.object
          _v540 = _v539.header
          start = end
          end += 4
          (_v540.seq,) = _get_struct_I().unpack(str[start:end])
          _v541 = _v540.stamp
          _x = _v541
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v540.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v540.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v539.id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v539.id = str[start:end]
          _v542 = _v539.type
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v542.key = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v542.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v542.db = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v542.db = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v539.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v539.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v539.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v543 = val6.position
            _x = _v543
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v544 = val6.orientation
            _x = _v544
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v539.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v539.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v539.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v539.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v545 = val6.position
            _x = _v545
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v546 = val6.orientation
            _x = _v546
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v539.mesh_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v539.planes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Plane()
            start = end
            end += 32
            val6.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
            _v539.planes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v539.plane_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v547 = val6.position
            _x = _v547
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v548 = val6.orientation
            _x = _v548
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v539.plane_poses.append(val6)
          start = end
          end += 1
          (_v539.operation,) = _get_struct_b().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.touch_links = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5 = str[start:end]
            val4.touch_links.append(val5)
          _v549 = val4.detach_posture
          _v550 = _v549.header
          start = end
          end += 4
          (_v550.seq,) = _get_struct_I().unpack(str[start:end])
          _v551 = _v550.stamp
          _x = _v551
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v550.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v550.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v549.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6 = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val6 = str[start:end]
            _v549.joint_names.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v549.points = []
          for i in range(0, length):
            val6 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v552 = val6.time_from_start
            _x = _v552
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
            _v549.points.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v526.attached_collision_objects.append(val4)
        start = end
        end += 1
        (_v526.is_diff,) = _get_struct_B().unpack(str[start:end])
        _v526.is_diff = bool(_v526.is_diff)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v520.goal_constraints = []
        for i in range(0, length):
          val3 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.joint_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.joint_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.joint_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.position_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.PositionConstraint()
            _v553 = val4.header
            start = end
            end += 4
            (_v553.seq,) = _get_struct_I().unpack(str[start:end])
            _v554 = _v553.stamp
            _x = _v554
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v553.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v553.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _v555 = val4.target_point_offset
            _x = _v555
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v556 = val4.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v556.primitives = []
            for i in range(0, length):
              val6 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val6.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v556.primitives.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v556.primitive_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v557 = val6.position
              _x = _v557
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v558 = val6.orientation
              _x = _v558
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v556.primitive_poses.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v556.meshes = []
            for i in range(0, length):
              val6 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.triangles = []
              for i in range(0, length):
                val7 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
                val6.triangles.append(val7)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val6.vertices = []
              for i in range(0, length):
                val7 = geometry_msgs.msg.Point()
                _x = val7
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val6.vertices.append(val7)
              _v556.meshes.append(val6)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v556.mesh_poses = []
            for i in range(0, length):
              val6 = geometry_msgs.msg.Pose()
              _v559 = val6.position
              _x = _v559
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v560 = val6.orientation
              _x = _v560
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v556.mesh_poses.append(val6)
            start = end
            end += 8
            (val4.weight,) = _get_struct_d().unpack(str[start:end])
            val3.position_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.orientation_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.OrientationConstraint()
            _v561 = val4.header
            start = end
            end += 4
            (_v561.seq,) = _get_struct_I().unpack(str[start:end])
            _v562 = _v561.stamp
            _x = _v562
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v561.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v561.frame_id = str[start:end]
            _v563 = val4.orientation
            _x = _v563
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val4.link_name = str[start:end]
            _x = val4
            start = end
            end += 32
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val3.orientation_constraints.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.visibility_constraints = []
          for i in range(0, length):
            val4 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v564 = val4.target_pose
            _v565 = _v564.header
            start = end
            end += 4
            (_v565.seq,) = _get_struct_I().unpack(str[start:end])
            _v566 = _v565.stamp
            _x = _v566
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v565.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v565.frame_id = str[start:end]
            _v567 = _v564.pose
            _v568 = _v567.position
            _x = _v568
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v569 = _v567.orientation
            _x = _v569
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v570 = val4.sensor_pose
            _v571 = _v570.header
            start = end
            end += 4
            (_v571.seq,) = _get_struct_I().unpack(str[start:end])
            _v572 = _v571.stamp
            _x = _v572
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v571.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v571.frame_id = str[start:end]
            _v573 = _v570.pose
            _v574 = _v573.position
            _x = _v574
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v575 = _v573.orientation
            _x = _v575
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val4
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val3.visibility_constraints.append(val4)
          _v520.goal_constraints.append(val3)
        _v576 = _v520.path_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v576.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v576.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v576.joint_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.JointConstraint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.joint_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.joint_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v576.joint_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v576.position_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.PositionConstraint()
          _v577 = val4.header
          start = end
          end += 4
          (_v577.seq,) = _get_struct_I().unpack(str[start:end])
          _v578 = _v577.stamp
          _x = _v578
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v577.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v577.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _v579 = val4.target_point_offset
          _x = _v579
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v580 = val4.constraint_region
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v580.primitives = []
          for i in range(0, length):
            val6 = shape_msgs.msg.SolidPrimitive()
            start = end
            end += 1
            (val6.type,) = _get_struct_B().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            s = struct.Struct(pattern)
            end += s.size
            val6.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v580.primitives.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v580.primitive_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v581 = val6.position
            _x = _v581
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v582 = val6.orientation
            _x = _v582
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v580.primitive_poses.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v580.meshes = []
          for i in range(0, length):
            val6 = shape_msgs.msg.Mesh()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.triangles = []
            for i in range(0, length):
              val7 = shape_msgs.msg.MeshTriangle()
              start = end
              end += 12
              val7.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
              val6.triangles.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            val6.vertices = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Point()
              _x = val7
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              val6.vertices.append(val7)
            _v580.meshes.append(val6)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v580.mesh_poses = []
          for i in range(0, length):
            val6 = geometry_msgs.msg.Pose()
            _v583 = val6.position
            _x = _v583
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v584 = val6.orientation
            _x = _v584
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _v580.mesh_poses.append(val6)
          start = end
          end += 8
          (val4.weight,) = _get_struct_d().unpack(str[start:end])
          _v576.position_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v576.orientation_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.OrientationConstraint()
          _v585 = val4.header
          start = end
          end += 4
          (_v585.seq,) = _get_struct_I().unpack(str[start:end])
          _v586 = _v585.stamp
          _x = _v586
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v585.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v585.frame_id = str[start:end]
          _v587 = val4.orientation
          _x = _v587
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.link_name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.link_name = str[start:end]
          _x = val4
          start = end
          end += 32
          (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
          _v576.orientation_constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v576.visibility_constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.VisibilityConstraint()
          start = end
          end += 8
          (val4.target_radius,) = _get_struct_d().unpack(str[start:end])
          _v588 = val4.target_pose
          _v589 = _v588.header
          start = end
          end += 4
          (_v589.seq,) = _get_struct_I().unpack(str[start:end])
          _v590 = _v589.stamp
          _x = _v590
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v589.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v589.frame_id = str[start:end]
          _v591 = _v588.pose
          _v592 = _v591.position
          _x = _v592
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v593 = _v591.orientation
          _x = _v593
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          start = end
          end += 4
          (val4.cone_sides,) = _get_struct_i().unpack(str[start:end])
          _v594 = val4.sensor_pose
          _v595 = _v594.header
          start = end
          end += 4
          (_v595.seq,) = _get_struct_I().unpack(str[start:end])
          _v596 = _v595.stamp
          _x = _v596
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v595.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v595.frame_id = str[start:end]
          _v597 = _v594.pose
          _v598 = _v597.position
          _x = _v598
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v599 = _v597.orientation
          _x = _v599
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _x = val4
          start = end
          end += 25
          (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
          _v576.visibility_constraints.append(val4)
        _v600 = _v520.trajectory_constraints
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v600.constraints = []
        for i in range(0, length):
          val4 = moveit_msgs.msg.Constraints()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val4.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.joint_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.JointConstraint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.joint_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.joint_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.joint_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.position_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.PositionConstraint()
            _v601 = val5.header
            start = end
            end += 4
            (_v601.seq,) = _get_struct_I().unpack(str[start:end])
            _v602 = _v601.stamp
            _x = _v602
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v601.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v601.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _v603 = val5.target_point_offset
            _x = _v603
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v604 = val5.constraint_region
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v604.primitives = []
            for i in range(0, length):
              val7 = shape_msgs.msg.SolidPrimitive()
              start = end
              end += 1
              (val7.type,) = _get_struct_B().unpack(str[start:end])
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              pattern = '<%sd'%length
              start = end
              s = struct.Struct(pattern)
              end += s.size
              val7.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
              _v604.primitives.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v604.primitive_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v605 = val7.position
              _x = _v605
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v606 = val7.orientation
              _x = _v606
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v604.primitive_poses.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v604.meshes = []
            for i in range(0, length):
              val7 = shape_msgs.msg.Mesh()
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.triangles = []
              for i in range(0, length):
                val8 = shape_msgs.msg.MeshTriangle()
                start = end
                end += 12
                val8.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
                val7.triangles.append(val8)
              start = end
              end += 4
              (length,) = _struct_I.unpack(str[start:end])
              val7.vertices = []
              for i in range(0, length):
                val8 = geometry_msgs.msg.Point()
                _x = val8
                start = end
                end += 24
                (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
                val7.vertices.append(val8)
              _v604.meshes.append(val7)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v604.mesh_poses = []
            for i in range(0, length):
              val7 = geometry_msgs.msg.Pose()
              _v607 = val7.position
              _x = _v607
              start = end
              end += 24
              (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
              _v608 = val7.orientation
              _x = _v608
              start = end
              end += 32
              (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
              _v604.mesh_poses.append(val7)
            start = end
            end += 8
            (val5.weight,) = _get_struct_d().unpack(str[start:end])
            val4.position_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.orientation_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.OrientationConstraint()
            _v609 = val5.header
            start = end
            end += 4
            (_v609.seq,) = _get_struct_I().unpack(str[start:end])
            _v610 = _v609.stamp
            _x = _v610
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v609.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v609.frame_id = str[start:end]
            _v611 = val5.orientation
            _x = _v611
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.link_name = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val5.link_name = str[start:end]
            _x = val5
            start = end
            end += 32
            (_x.absolute_x_axis_tolerance, _x.absolute_y_axis_tolerance, _x.absolute_z_axis_tolerance, _x.weight,) = _get_struct_4d().unpack(str[start:end])
            val4.orientation_constraints.append(val5)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val4.visibility_constraints = []
          for i in range(0, length):
            val5 = moveit_msgs.msg.VisibilityConstraint()
            start = end
            end += 8
            (val5.target_radius,) = _get_struct_d().unpack(str[start:end])
            _v612 = val5.target_pose
            _v613 = _v612.header
            start = end
            end += 4
            (_v613.seq,) = _get_struct_I().unpack(str[start:end])
            _v614 = _v613.stamp
            _x = _v614
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v613.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v613.frame_id = str[start:end]
            _v615 = _v612.pose
            _v616 = _v615.position
            _x = _v616
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v617 = _v615.orientation
            _x = _v617
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            start = end
            end += 4
            (val5.cone_sides,) = _get_struct_i().unpack(str[start:end])
            _v618 = val5.sensor_pose
            _v619 = _v618.header
            start = end
            end += 4
            (_v619.seq,) = _get_struct_I().unpack(str[start:end])
            _v620 = _v619.stamp
            _x = _v620
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v619.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v619.frame_id = str[start:end]
            _v621 = _v618.pose
            _v622 = _v621.position
            _x = _v622
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v623 = _v621.orientation
            _x = _v623
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            _x = val5
            start = end
            end += 25
            (_x.max_view_angle, _x.max_range_angle, _x.sensor_view_direction, _x.weight,) = _get_struct_2dBd().unpack(str[start:end])
            val4.visibility_constraints.append(val5)
          _v600.constraints.append(val4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v520.planner_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v520.planner_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v520.group_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v520.group_name = str[start:end]
        _x = _v520
        start = end
        end += 28
        (_x.num_planning_attempts, _x.allowed_planning_time, _x.max_velocity_scaling_factor, _x.max_acceleration_scaling_factor,) = _get_struct_i3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.blend_radius,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.request.items.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v624 = val1.translation
        _x = _v624
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v625 = val1.rotation
        _x = _v625
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v626 = val1.linear
        _x = _v626
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v627 = val1.angular
        _x = _v627
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v628 = val1.force
        _x = _v628
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v629 = val1.torque
        _x = _v629
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v630 = val1.object
        _v631 = _v630.header
        start = end
        end += 4
        (_v631.seq,) = _get_struct_I().unpack(str[start:end])
        _v632 = _v631.stamp
        _x = _v632
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v631.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v631.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v630.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v630.id = str[start:end]
        _v633 = _v630.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v633.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v633.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v633.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v633.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v630.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v630.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v630.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v634 = val3.position
          _x = _v634
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v635 = val3.orientation
          _x = _v635
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v630.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v630.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v630.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v630.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v636 = val3.position
          _x = _v636
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v637 = val3.orientation
          _x = _v637
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v630.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v630.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v630.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v630.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v638 = val3.position
          _x = _v638
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v639 = val3.orientation
          _x = _v639
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v630.plane_poses.append(val3)
        start = end
        end += 1
        (_v630.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v640 = val1.detach_posture
        _v641 = _v640.header
        start = end
        end += 4
        (_v641.seq,) = _get_struct_I().unpack(str[start:end])
        _v642 = _v641.stamp
        _x = _v642
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v641.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v641.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v640.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v640.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v640.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v643 = val3.time_from_start
          _x = _v643
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v640.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.robot_state.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.robot_state.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.robot_model_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v644 = val1.header
        start = end
        end += 4
        (_v644.seq,) = _get_struct_I().unpack(str[start:end])
        _v645 = _v644.stamp
        _x = _v645
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v644.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v644.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = str[start:end]
        _v646 = val1.transform
        _v647 = _v646.translation
        _x = _v647
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v648 = _v646.rotation
        _x = _v648
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = list(map(bool, val1.enabled))
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.entry_values.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values = list(map(bool, self.action_goal.goal.planning_options.planning_scene_diff.allowed_collision_matrix.default_entry_values))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.link_scale = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.LinkScale()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.scale,) = _get_struct_d().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.link_scale.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.object_colors = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.ObjectColor()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v649 = val1.color
        _x = _v649
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.object_colors.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.CollisionObject()
        _v650 = val1.header
        start = end
        end += 4
        (_v650.seq,) = _get_struct_I().unpack(str[start:end])
        _v651 = _v650.stamp
        _x = _v651
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v650.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v650.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.id = str[start:end]
        _v652 = val1.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v652.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v652.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v652.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v652.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v653 = val2.position
          _x = _v653
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v654 = val2.orientation
          _x = _v654
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v655 = val2.position
          _x = _v655
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v656 = val2.orientation
          _x = _v656
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.mesh_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.planes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val2.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          val1.planes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.plane_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v657 = val2.position
          _x = _v657
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v658 = val2.orientation
          _x = _v658
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.plane_poses.append(val2)
        start = end
        end += 1
        (val1.operation,) = _get_struct_b().unpack(str[start:end])
        self.action_goal.goal.planning_options.planning_scene_diff.world.collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.position.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.x, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.y, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.z, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.origin.orientation.w, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.seq, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.secs, _x.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary = bool(self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.binary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.id = str[start:end]
      start = end
      end += 8
      (self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.resolution,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_goal.goal.planning_options.planning_scene_diff.world.octomap.octomap.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 40
      (_x.action_goal.goal.planning_options.planning_scene_diff.is_diff, _x.action_goal.goal.planning_options.plan_only, _x.action_goal.goal.planning_options.look_around, _x.action_goal.goal.planning_options.look_around_attempts, _x.action_goal.goal.planning_options.max_safe_execution_cost, _x.action_goal.goal.planning_options.replan, _x.action_goal.goal.planning_options.replan_attempts, _x.action_goal.goal.planning_options.replan_delay, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3BidBid3I().unpack(str[start:end])
      self.action_goal.goal.planning_options.planning_scene_diff.is_diff = bool(self.action_goal.goal.planning_options.planning_scene_diff.is_diff)
      self.action_goal.goal.planning_options.plan_only = bool(self.action_goal.goal.planning_options.plan_only)
      self.action_goal.goal.planning_options.look_around = bool(self.action_goal.goal.planning_options.look_around)
      self.action_goal.goal.planning_options.replan = bool(self.action_goal.goal.planning_options.replan)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.action_result.result.response.error_code.val, _x.action_result.result.response.sequence_start.joint_state.header.seq, _x.action_result.result.response.sequence_start.joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.joint_state.header.stamp.nsecs,) = _get_struct_i3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.action_result.result.response.sequence_start.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.action_result.result.response.sequence_start.multi_dof_joint_state.header.seq, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.secs, _x.action_result.result.response.sequence_start.multi_dof_joint_state.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.result.response.sequence_start.multi_dof_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.action_result.result.response.sequence_start.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Transform()
        _v659 = val1.translation
        _x = _v659
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v660 = val1.rotation
        _x = _v660
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.twist = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v661 = val1.linear
        _x = _v661
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v662 = val1.angular
        _x = _v662
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.twist.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v663 = val1.force
        _x = _v663
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v664 = val1.torque
        _x = _v664
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.multi_dof_joint_state.wrench.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.sequence_start.attached_collision_objects = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.link_name = str[start:end]
        _v665 = val1.object
        _v666 = _v665.header
        start = end
        end += 4
        (_v666.seq,) = _get_struct_I().unpack(str[start:end])
        _v667 = _v666.stamp
        _x = _v667
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v666.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v666.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v665.id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v665.id = str[start:end]
        _v668 = _v665.type
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v668.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v668.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v668.db = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v668.db = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v665.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _get_struct_B().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v665.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v665.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v669 = val3.position
          _x = _v669
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v670 = val3.orientation
          _x = _v670
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v665.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v665.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.vertices.append(val4)
          _v665.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v665.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v671 = val3.position
          _x = _v671
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v672 = val3.orientation
          _x = _v672
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v665.mesh_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v665.planes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Plane()
          start = end
          end += 32
          val3.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
          _v665.planes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v665.plane_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v673 = val3.position
          _x = _v673
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v674 = val3.orientation
          _x = _v674
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v665.plane_poses.append(val3)
        start = end
        end += 1
        (_v665.operation,) = _get_struct_b().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        _v675 = val1.detach_posture
        _v676 = _v675.header
        start = end
        end += 4
        (_v676.seq,) = _get_struct_I().unpack(str[start:end])
        _v677 = _v676.stamp
        _x = _v677
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v676.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v676.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v675.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v675.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v675.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v678 = val3.time_from_start
          _x = _v678
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v675.points.append(val3)
        start = end
        end += 8
        (val1.weight,) = _get_struct_d().unpack(str[start:end])
        self.action_result.result.response.sequence_start.attached_collision_objects.append(val1)
      start = end
      end += 1
      (self.action_result.result.response.sequence_start.is_diff,) = _get_struct_B().unpack(str[start:end])
      self.action_result.result.response.sequence_start.is_diff = bool(self.action_result.result.response.sequence_start.is_diff)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.response.planned_trajectories = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.RobotTrajectory()
        _v679 = val1.joint_trajectory
        _v680 = _v679.header
        start = end
        end += 4
        (_v680.seq,) = _get_struct_I().unpack(str[start:end])
        _v681 = _v680.stamp
        _x = _v681
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v680.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v680.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v679.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v679.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v679.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          s = struct.Struct(pattern)
          end += s.size
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v682 = val3.time_from_start
          _x = _v682
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v679.points.append(val3)
        _v683 = val1.multi_dof_joint_trajectory
        _v684 = _v683.header
        start = end
        end += 4
        (_v684.seq,) = _get_struct_I().unpack(str[start:end])
        _v685 = _v684.stamp
        _x = _v685
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v684.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v684.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v683.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val3 = str[start:end]
          _v683.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v683.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.MultiDOFJointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.transforms = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Transform()
            _v686 = val4.translation
            _x = _v686
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v687 = val4.rotation
            _x = _v687
            start = end
            end += 32
            (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
            val3.transforms.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.velocities = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v688 = val4.linear
            _x = _v688
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v689 = val4.angular
            _x = _v689
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.velocities.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.accelerations = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Twist()
            _v690 = val4.linear
            _x = _v690
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            _v691 = val4.angular
            _x = _v691
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
            val3.accelerations.append(val4)
          _v692 = val3.time_from_start
          _x = _v692
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v683.points.append(val3)
        self.action_result.result.response.planned_trajectories.append(val1)
      _x = self
      start = end
      end += 20
      (_x.action_result.result.response.planning_time, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.state = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2dBd = None
def _get_struct_2dBd():
    global _struct_2dBd
    if _struct_2dBd is None:
        _struct_2dBd = struct.Struct("<2dBd")
    return _struct_2dBd
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3BidBid3I = None
def _get_struct_3BidBid3I():
    global _struct_3BidBid3I
    if _struct_3BidBid3I is None:
        _struct_3BidBid3I = struct.Struct("<3BidBid3I")
    return _struct_3BidBid3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d3I = None
def _get_struct_d3I():
    global _struct_d3I
    if _struct_d3I is None:
        _struct_d3I = struct.Struct("<d3I")
    return _struct_d3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i3I = None
def _get_struct_i3I():
    global _struct_i3I
    if _struct_i3I is None:
        _struct_i3I = struct.Struct("<i3I")
    return _struct_i3I
_struct_i3d = None
def _get_struct_i3d():
    global _struct_i3d
    if _struct_i3d is None:
        _struct_i3d = struct.Struct("<i3d")
    return _struct_i3d
